// Code generated by pegomock. DO NOT EDIT.
// Source: gotify_matrix_bot/matrix (interfaces: MautrixClientType)

package matrix_test

import (
	context "context"
	pegomock "github.com/petergtz/pegomock/v4"
	mautrix "maunium.net/go/mautrix"
	event "maunium.net/go/mautrix/event"
	id "maunium.net/go/mautrix/id"
	"reflect"
	"time"
)

type MockMautrixClientType struct {
	fail func(message string, callerSkip ...int)
}

func NewMockMautrixClientType(options ...pegomock.Option) *MockMautrixClientType {
	mock := &MockMautrixClientType{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockMautrixClientType) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockMautrixClientType) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockMautrixClientType) JoinedMembers(ctx context.Context, roomID id.RoomID) (*mautrix.RespJoinedMembers, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMautrixClientType().")
	}
	_params := []pegomock.Param{ctx, roomID}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("JoinedMembers", _params, []reflect.Type{reflect.TypeOf((**mautrix.RespJoinedMembers)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *mautrix.RespJoinedMembers
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*mautrix.RespJoinedMembers)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockMautrixClientType) SendMessageEvent(ctx context.Context, roomID id.RoomID, eventType event.Type, content interface{}, extra ...mautrix.ReqSendEvent) (*mautrix.RespSendEvent, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMautrixClientType().")
	}
	_params := []pegomock.Param{ctx, roomID, eventType, content}
	for _, param := range extra {
		_params = append(_params, param)
	}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("SendMessageEvent", _params, []reflect.Type{reflect.TypeOf((**mautrix.RespSendEvent)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *mautrix.RespSendEvent
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*mautrix.RespSendEvent)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockMautrixClientType) Sync() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMautrixClientType().")
	}
	_params := []pegomock.Param{}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("Sync", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockMautrixClientType) UploadMedia(ctx context.Context, data mautrix.ReqUploadMedia) (*mautrix.RespMediaUpload, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockMautrixClientType().")
	}
	_params := []pegomock.Param{ctx, data}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("UploadMedia", _params, []reflect.Type{reflect.TypeOf((**mautrix.RespMediaUpload)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *mautrix.RespMediaUpload
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*mautrix.RespMediaUpload)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockMautrixClientType) VerifyWasCalledOnce() *VerifierMockMautrixClientType {
	return &VerifierMockMautrixClientType{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockMautrixClientType) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockMautrixClientType {
	return &VerifierMockMautrixClientType{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockMautrixClientType) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockMautrixClientType {
	return &VerifierMockMautrixClientType{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockMautrixClientType) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockMautrixClientType {
	return &VerifierMockMautrixClientType{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockMautrixClientType struct {
	mock                   *MockMautrixClientType
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockMautrixClientType) JoinedMembers(ctx context.Context, roomID id.RoomID) *MockMautrixClientType_JoinedMembers_OngoingVerification {
	_params := []pegomock.Param{ctx, roomID}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "JoinedMembers", _params, verifier.timeout)
	return &MockMautrixClientType_JoinedMembers_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMautrixClientType_JoinedMembers_OngoingVerification struct {
	mock              *MockMautrixClientType
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMautrixClientType_JoinedMembers_OngoingVerification) GetCapturedArguments() (context.Context, id.RoomID) {
	ctx, roomID := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], roomID[len(roomID)-1]
}

func (c *MockMautrixClientType_JoinedMembers_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []id.RoomID) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]context.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(context.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]id.RoomID, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(id.RoomID)
			}
		}
	}
	return
}

func (verifier *VerifierMockMautrixClientType) SendMessageEvent(ctx context.Context, roomID id.RoomID, eventType event.Type, content interface{}, extra ...mautrix.ReqSendEvent) *MockMautrixClientType_SendMessageEvent_OngoingVerification {
	_params := []pegomock.Param{ctx, roomID, eventType, content}
	for _, param := range extra {
		_params = append(_params, param)
	}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SendMessageEvent", _params, verifier.timeout)
	return &MockMautrixClientType_SendMessageEvent_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMautrixClientType_SendMessageEvent_OngoingVerification struct {
	mock              *MockMautrixClientType
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMautrixClientType_SendMessageEvent_OngoingVerification) GetCapturedArguments() (context.Context, id.RoomID, event.Type, interface{}, []mautrix.ReqSendEvent) {
	ctx, roomID, eventType, content, extra := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], roomID[len(roomID)-1], eventType[len(eventType)-1], content[len(content)-1], extra[len(extra)-1]
}

func (c *MockMautrixClientType_SendMessageEvent_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []id.RoomID, _param2 []event.Type, _param3 []interface{}, _param4 [][]mautrix.ReqSendEvent) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]context.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(context.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]id.RoomID, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(id.RoomID)
			}
		}
		if len(_params) > 2 {
			_param2 = make([]event.Type, len(c.methodInvocations))
			for u, param := range _params[2] {
				_param2[u] = param.(event.Type)
			}
		}
		if len(_params) > 3 {
			_param3 = make([]interface{}, len(c.methodInvocations))
			for u, param := range _params[3] {
				_param3[u] = param.(interface{})
			}
		}
		_param4 = make([][]mautrix.ReqSendEvent, len(c.methodInvocations))
		for u := 0; u < len(c.methodInvocations); u++ {
			_param4[u] = make([]mautrix.ReqSendEvent, len(_params)-4)
			for x := 4; x < len(_params); x++ {
				if _params[x][u] != nil {
					_param4[u][x-4] = _params[x][u].(mautrix.ReqSendEvent)
				}
			}
		}
	}
	return
}

func (verifier *VerifierMockMautrixClientType) Sync() *MockMautrixClientType_Sync_OngoingVerification {
	_params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Sync", _params, verifier.timeout)
	return &MockMautrixClientType_Sync_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMautrixClientType_Sync_OngoingVerification struct {
	mock              *MockMautrixClientType
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMautrixClientType_Sync_OngoingVerification) GetCapturedArguments() {
}

func (c *MockMautrixClientType_Sync_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockMautrixClientType) UploadMedia(ctx context.Context, data mautrix.ReqUploadMedia) *MockMautrixClientType_UploadMedia_OngoingVerification {
	_params := []pegomock.Param{ctx, data}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UploadMedia", _params, verifier.timeout)
	return &MockMautrixClientType_UploadMedia_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMautrixClientType_UploadMedia_OngoingVerification struct {
	mock              *MockMautrixClientType
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMautrixClientType_UploadMedia_OngoingVerification) GetCapturedArguments() (context.Context, mautrix.ReqUploadMedia) {
	ctx, data := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], data[len(data)-1]
}

func (c *MockMautrixClientType_UploadMedia_OngoingVerification) GetAllCapturedArguments() (_param0 []context.Context, _param1 []mautrix.ReqUploadMedia) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]context.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(context.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]mautrix.ReqUploadMedia, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(mautrix.ReqUploadMedia)
			}
		}
	}
	return
}
